/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javariance.bookshop;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Tharindu
 */
public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
        
    public Main() {
        initComponents();
        fillComboAuther();
        OrderChangeStatus();
    }
        
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane7 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        Search = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        ComboBoxSrchBy = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        BookSearchTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtISBN = new javax.swing.JTextField();
        txtCategory = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        btnEditTitle = new javax.swing.JButton();
        btnEditAuther = new javax.swing.JButton();
        btnEditCat = new javax.swing.JButton();
        btnEditPrice = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        txtSearchBooks = new javax.swing.JTextField();
        jScrollPane13 = new javax.swing.JScrollPane();
        txtTitle = new javax.swing.JTextArea();
        ComboAuthor = new javax.swing.JComboBox<>();
        Sale = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        txtBookSearch = new javax.swing.JTextField();
        txtQuan = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblBooks = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblBillBookList = new javax.swing.JTable();
        jLabel12 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtBalance = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtPayment = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        Purchase = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        txtPublisher = new javax.swing.JTextField();
        btnAddPublisher = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblPubBook = new javax.swing.JTable();
        txtBookInvoice = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtquant = new javax.swing.JTextField();
        jButton12 = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblInvoceBooks = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        btnNewBook = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        txtCost = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        txtTotalCost = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtPay = new javax.swing.JTextField();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        Order = new javax.swing.JPanel();
        btnNewOrder = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        txtOrderSearch = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblOrderBooks = new javax.swing.JTable();
        jLabel22 = new javax.swing.JLabel();
        cmbOrderSearchFilter = new javax.swing.JComboBox<>();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        cmbOrderSearch = new javax.swing.JComboBox<>();
        V_Sales = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblBills = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        tblBillBooks = new javax.swing.JTable();
        jLabel24 = new javax.swing.JLabel();
        txtSearchBills = new javax.swing.JTextField();
        cmbSearch = new javax.swing.JComboBox<>();
        BillDateChooser = new com.toedter.calendar.JDateChooser();
        V_Purchases = new javax.swing.JPanel();
        cmbInvoiceSearch = new javax.swing.JComboBox<>();
        txtSearchInvoices = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        tblInvoice = new javax.swing.JTable();
        jScrollPane12 = new javax.swing.JScrollPane();
        tblInvoiceBooks = new javax.swing.JTable();
        dateInvoice = new com.toedter.calendar.JDateChooser();
        User = new javax.swing.JPanel();
        Settings = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btn_AddUser = new javax.swing.JButton();
        btn_ChngPw = new javax.swing.JButton();
        btn_removeUser = new javax.swing.JButton();
        Author = new javax.swing.JPanel();
        btn_customerEdit = new javax.swing.JButton();
        btn_customerRemove = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton17 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButton21 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(jTable7);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.setFont(new java.awt.Font("Calibri", 1, 20)); // NOI18N
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(435, 50));
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        Search.setPreferredSize(new java.awt.Dimension(100, 20));
        Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SearchMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel2.setText("Search");

        ComboBoxSrchBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Book_Name", "Author_Name", "Category" }));

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel3.setText("Search By");

        BookSearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN ", "Title", "Auther", "Quantity", "Category"
            }
        ));
        BookSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BookSearchTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(BookSearchTable);
        if (BookSearchTable.getColumnModel().getColumnCount() > 0) {
            BookSearchTable.getColumnModel().getColumn(1).setMinWidth(180);
            BookSearchTable.getColumnModel().getColumn(3).setMaxWidth(50);
        }

        jLabel4.setText("BOOK TITLE");
        jLabel4.setPreferredSize(new java.awt.Dimension(100, 20));

        jLabel5.setText("ISBN NUMBER");
        jLabel5.setPreferredSize(new java.awt.Dimension(100, 20));

        jLabel6.setText("AUTHER");
        jLabel6.setPreferredSize(new java.awt.Dimension(100, 20));

        jLabel7.setText("CATEGORY");
        jLabel7.setPreferredSize(new java.awt.Dimension(100, 20));

        jLabel8.setText("SELLING PRICE");
        jLabel8.setPreferredSize(new java.awt.Dimension(100, 20));

        jLabel9.setText("AVAILABLE STOCK");
        jLabel9.setPreferredSize(new java.awt.Dimension(100, 20));

        txtISBN.setEditable(false);

        txtCategory.setEditable(false);

        txtQuantity.setEditable(false);

        txtPrice.setEditable(false);

        btnEditTitle.setText("Edit");
        btnEditTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditTitleActionPerformed(evt);
            }
        });

        btnEditAuther.setText("Edit");
        btnEditAuther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditAutherActionPerformed(evt);
            }
        });

        btnEditCat.setText("Edit");
        btnEditCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditCatActionPerformed(evt);
            }
        });

        btnEditPrice.setText("Edit");
        btnEditPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPriceActionPerformed(evt);
            }
        });

        btnReset.setText("Reset Changes");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnSave.setText("Save Changes");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        txtSearchBooks.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchBooksKeyReleased(evt);
            }
        });

        txtTitle.setEditable(false);
        txtTitle.setColumns(15);
        txtTitle.setRows(1);
        txtTitle.setWrapStyleWord(true);
        txtTitle.setMinimumSize(new java.awt.Dimension(5, 25));
        jScrollPane13.setViewportView(txtTitle);

        ComboAuthor.setEnabled(false);
        ComboAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboAuthorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SearchLayout = new javax.swing.GroupLayout(Search);
        Search.setLayout(SearchLayout);
        SearchLayout.setHorizontalGroup(
            SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(SearchLayout.createSequentialGroup()
                        .addGroup(SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCategory)
                            .addComponent(txtQuantity)
                            .addComponent(txtPrice)
                            .addComponent(txtISBN)
                            .addComponent(jScrollPane13)
                            .addComponent(ComboAuthor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEditTitle)
                            .addComponent(btnEditPrice)
                            .addComponent(btnEditAuther)
                            .addComponent(btnEditCat))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(SearchLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearchBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(jLabel3)
                        .addGap(64, 64, 64)
                        .addComponent(ComboBoxSrchBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SearchLayout.setVerticalGroup(
            SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ComboBoxSrchBy, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtSearchBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SearchLayout.createSequentialGroup()
                        .addComponent(btnEditTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEditAuther, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditCat, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(btnEditPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SearchLayout.createSequentialGroup()
                        .addGroup(SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(SearchLayout.createSequentialGroup()
                                .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(77, 77, 77)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(SearchLayout.createSequentialGroup()
                                .addGroup(SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ComboAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(SearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(62, 62, 62))
        );

        jTabbedPane1.addTab("SEARCH", Search);

        jLabel10.setText("ISBN Number");

        txtBookSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBookSearchKeyReleased(evt);
            }
        });

        jButton7.setText("ADD");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        tblBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Title", "Auther", "Avl. Quantity", "Price"
            }
        ));
        tblBooks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBooksMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblBooks);

        tblBillBookList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Title", "Quantity", "Prices"
            }
        ));
        tblBillBookList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBillBookListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblBillBookList);

        jLabel12.setText("Total Price");

        txtTotal.setEditable(false);
        txtTotal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtTotal.setText("0");

        jLabel13.setText("Payment");

        txtBalance.setEditable(false);
        txtBalance.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel14.setText("Balance");

        txtPayment.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        txtPayment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPaymentKeyReleased(evt);
            }
        });

        jButton8.setText("Make Bill");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Cancel Bill");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel26.setText("Quantity");

        javax.swing.GroupLayout SaleLayout = new javax.swing.GroupLayout(Sale);
        Sale.setLayout(SaleLayout);
        SaleLayout.setHorizontalGroup(
            SaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SaleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SaleLayout.createSequentialGroup()
                        .addGroup(SaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addGap(93, 93, 93)
                        .addGroup(SaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58)
                        .addGroup(SaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(SaleLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtBookSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(jLabel26)
                        .addGap(29, 29, 29)
                        .addComponent(txtQuan, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(jButton7)))
                .addContainerGap())
        );
        SaleLayout.setVerticalGroup(
            SaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SaleLayout.createSequentialGroup()
                .addGroup(SaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(SaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtBookSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtQuan, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(SaleLayout.createSequentialGroup()
                        .addGroup(SaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(SaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(SaleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(SaleLayout.createSequentialGroup()
                        .addComponent(jButton8)
                        .addGap(18, 18, 18)
                        .addComponent(jButton9)))
                .addGap(0, 59, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("SALE BOOKS", Sale);

        jLabel15.setText("Publisher");

        txtPublisher.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPublisherKeyReleased(evt);
            }
        });

        btnAddPublisher.setText("Add New Publisher");
        btnAddPublisher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPublisherActionPerformed(evt);
            }
        });

        tblPubBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblPubBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPubBookMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblPubBook);

        txtBookInvoice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBookInvoiceKeyReleased(evt);
            }
        });

        jLabel16.setText("ISBN Number");

        jButton12.setText("ADD");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        tblInvoceBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Title ", "Quantiy", "Total Cost"
            }
        ));
        jScrollPane6.setViewportView(tblInvoceBooks);

        jLabel17.setText("Quantity");

        btnNewBook.setText("Add New Book");
        btnNewBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewBookActionPerformed(evt);
            }
        });

        jLabel18.setText("Cost/Unit");

        jLabel19.setText("Total Cost");

        txtTotalCost.setEditable(false);
        txtTotalCost.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jLabel20.setText("Payment");

        txtPay.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        jButton14.setText("Print Reciept");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("Cancel Bill");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PurchaseLayout = new javax.swing.GroupLayout(Purchase);
        Purchase.setLayout(PurchaseLayout);
        PurchaseLayout.setHorizontalGroup(
            PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PurchaseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PurchaseLayout.createSequentialGroup()
                        .addGroup(PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6)
                            .addGroup(PurchaseLayout.createSequentialGroup()
                                .addGroup(PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txtPublisher)
                                    .addComponent(txtBookInvoice, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(PurchaseLayout.createSequentialGroup()
                                        .addComponent(btnNewBook, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCost, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel17)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtquant, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton12))
                                    .addComponent(btnAddPublisher))
                                .addGap(0, 28, Short.MAX_VALUE))
                            .addComponent(jScrollPane5))
                        .addContainerGap())
                    .addGroup(PurchaseLayout.createSequentialGroup()
                        .addGroup(PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20))
                        .addGap(93, 93, 93)
                        .addGroup(PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTotalCost, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(txtPay))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27))))
        );
        PurchaseLayout.setVerticalGroup(
            PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PurchaseLayout.createSequentialGroup()
                .addGroup(PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddPublisher, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBookInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNewBook, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCost, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtquant, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PurchaseLayout.createSequentialGroup()
                        .addGroup(PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotalCost, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PurchaseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPay, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(PurchaseLayout.createSequentialGroup()
                        .addComponent(jButton14)
                        .addGap(18, 18, 18)
                        .addComponent(jButton15)))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("PURCHASE ITEMS", Purchase);

        btnNewOrder.setText("Make New Order");
        btnNewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewOrderActionPerformed(evt);
            }
        });

        jLabel21.setText("Search");

        txtOrderSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtOrderSearchKeyReleased(evt);
            }
        });

        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order_ID", "Customer_Name", "Status", "Total_Price", "Order_Date", "Completed_Date"
            }
        ));
        tblOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrderMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblOrder);

        tblOrderBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Title ", "Quantity", "Status"
            }
        ));
        jScrollPane8.setViewportView(tblOrderBooks);

        jLabel22.setText("Order Status");

        cmbOrderSearchFilter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Ready", "Not-Ready", "Completed" }));
        cmbOrderSearchFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbOrderSearchFilterItemStateChanged(evt);
            }
        });

        jButton18.setText("Make Bill");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setText("Print Order");

        jLabel23.setText("By");

        cmbOrderSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Order_ID", "Cust_NIC", "Cust_Name" }));

        javax.swing.GroupLayout OrderLayout = new javax.swing.GroupLayout(Order);
        Order.setLayout(OrderLayout);
        OrderLayout.setHorizontalGroup(
            OrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OrderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnNewOrder)
                    .addGroup(OrderLayout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addGap(18, 18, 18)
                        .addComponent(txtOrderSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23)
                        .addGap(18, 18, 18)
                        .addComponent(cmbOrderSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel22)
                        .addGap(18, 18, 18)
                        .addComponent(cmbOrderSearchFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                    .addComponent(jScrollPane8)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, OrderLayout.createSequentialGroup()
                        .addComponent(jButton19)
                        .addGap(44, 44, 44)
                        .addComponent(jButton18)))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        OrderLayout.setVerticalGroup(
            OrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OrderLayout.createSequentialGroup()
                .addComponent(btnNewOrder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(OrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(OrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbOrderSearchFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(OrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtOrderSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbOrderSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(OrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton19))
                .addGap(0, 41, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ORDER ITEMS", Order);

        V_Sales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                V_SalesMouseClicked(evt);
            }
        });

        tblBills.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bill No", "Emp ID", "Total", "Date"
            }
        ));
        tblBills.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBillsMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(tblBills);

        tblBillBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Title", "Quantity", "Price"
            }
        ));
        jScrollPane10.setViewportView(tblBillBooks);

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel24.setText("Search");

        txtSearchBills.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchBillsKeyReleased(evt);
            }
        });

        cmbSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bill No", "Emp_ID" }));

        BillDateChooser.setDateFormatString("yyyy-MM-d");
        BillDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                BillDateChooserPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout V_SalesLayout = new javax.swing.GroupLayout(V_Sales);
        V_Sales.setLayout(V_SalesLayout);
        V_SalesLayout.setHorizontalGroup(
            V_SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(V_SalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(V_SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(V_SalesLayout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearchBills, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83)
                        .addComponent(BillDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        V_SalesLayout.setVerticalGroup(
            V_SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, V_SalesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(V_SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BillDateChooser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(V_SalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSearchBills, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
        );

        jTabbedPane1.addTab("VIEW SALES", V_Sales);

        cmbInvoiceSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Invoice_No", "Publisher_ID" }));

        txtSearchInvoices.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchInvoicesKeyReleased(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel25.setText("Search");

        tblInvoice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Invoice_No", "Publisher_ID", "TotalC_Cost", "Date"
            }
        ));
        tblInvoice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblInvoiceMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(tblInvoice);

        tblInvoiceBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ISBN", "Book_Title", "Quantity", "Unit_Cost", "Price"
            }
        ));
        jScrollPane12.setViewportView(tblInvoiceBooks);

        dateInvoice.setDateFormatString("yyyy-MM-d");
        dateInvoice.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateInvoicePropertyChange(evt);
            }
        });

        javax.swing.GroupLayout V_PurchasesLayout = new javax.swing.GroupLayout(V_Purchases);
        V_Purchases.setLayout(V_PurchasesLayout);
        V_PurchasesLayout.setHorizontalGroup(
            V_PurchasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(V_PurchasesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(V_PurchasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(V_PurchasesLayout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearchInvoices, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbInvoiceSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)
                        .addComponent(dateInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        V_PurchasesLayout.setVerticalGroup(
            V_PurchasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, V_PurchasesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(V_PurchasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(V_PurchasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSearchInvoices, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbInvoiceSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dateInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74))
        );

        jTabbedPane1.addTab("VIEW PURCHASES", V_Purchases);

        javax.swing.GroupLayout UserLayout = new javax.swing.GroupLayout(User);
        User.setLayout(UserLayout);
        UserLayout.setHorizontalGroup(
            UserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
        );
        UserLayout.setVerticalGroup(
            UserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 495, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("USER", User);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14))); // NOI18N

        btn_AddUser.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        btn_AddUser.setText("Add a user");
        btn_AddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_AddUserActionPerformed(evt);
            }
        });

        btn_ChngPw.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        btn_ChngPw.setText("change password");
        btn_ChngPw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ChngPwActionPerformed(evt);
            }
        });

        btn_removeUser.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        btn_removeUser.setText("Remove");
        btn_removeUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_removeUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(111, Short.MAX_VALUE)
                .addComponent(btn_AddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_ChngPw, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_removeUser, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_removeUser, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_ChngPw, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_AddUser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        Author.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "customer", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14))); // NOI18N

        btn_customerEdit.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        btn_customerEdit.setText("Edit ");
        btn_customerEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_customerEditActionPerformed(evt);
            }
        });

        btn_customerRemove.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        btn_customerRemove.setText("Remove");
        btn_customerRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_customerRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AuthorLayout = new javax.swing.GroupLayout(Author);
        Author.setLayout(AuthorLayout);
        AuthorLayout.setHorizontalGroup(
            AuthorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AuthorLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_customerEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_customerRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        AuthorLayout.setVerticalGroup(
            AuthorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AuthorLayout.createSequentialGroup()
                .addGroup(AuthorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_customerRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_customerEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Author", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14))); // NOI18N

        jButton17.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jButton17.setText("Edit ");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 17, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Alert", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 14))); // NOI18N

        jButton21.setFont(new java.awt.Font("Tahoma", 2, 14)); // NOI18N
        jButton21.setText("view");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout SettingsLayout = new javax.swing.GroupLayout(Settings);
        Settings.setLayout(SettingsLayout);
        SettingsLayout.setHorizontalGroup(
            SettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Author, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        SettingsLayout.setVerticalGroup(
            SettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SettingsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Author, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(132, Short.MAX_VALUE))
        );

        jPanel5.getAccessibleContext().setAccessibleName("Low Quantity Books");
        jPanel5.getAccessibleContext().setAccessibleDescription("Low Quantity Books");

        jTabbedPane1.addTab("SETTINGS", Settings);

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        jLabel1.setText("GRANTHALOKA BOOKSHOP");
        jLabel1.setToolTipText("");
        jLabel1.setPreferredSize(new java.awt.Dimension(412, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
        Booktable();
        InvoceTable();
        BillTable();
        OrderTable();

    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        // TODO add your handling code here:
        new Notifications().setVisible(true);

    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
        new EditAuthor().setVisible(true);
    }//GEN-LAST:event_jButton17ActionPerformed

    private void btn_customerRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_customerRemoveActionPerformed
        // TODO add your handling code here:
        new RemoveCustomer().setVisible(true);
    }//GEN-LAST:event_btn_customerRemoveActionPerformed

    private void btn_customerEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_customerEditActionPerformed
        // TODO add your handling code here:
        EditCustomer cust=new EditCustomer();
        cust.setVisible(true);
    }//GEN-LAST:event_btn_customerEditActionPerformed

    private void btn_removeUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_removeUserActionPerformed
        new RemoveUser().setVisible(true);
    }//GEN-LAST:event_btn_removeUserActionPerformed

    private void btn_ChngPwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ChngPwActionPerformed
        new ChangePassword().setVisible(true);
    }//GEN-LAST:event_btn_ChngPwActionPerformed

    private void btn_AddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_AddUserActionPerformed
        new addUser().setVisible(true);
    }//GEN-LAST:event_btn_AddUserActionPerformed

    private void dateInvoicePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateInvoicePropertyChange
        // TODO add your handling code here:
        String slctdate=((JTextField)dateInvoice.getDateEditor().getUiComponent()).getText();
        try{
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.createStatement();
            DefaultTableModel tblModel=(DefaultTableModel)tblInvoice.getModel();
            tblModel.getDataVector().removeAllElements();
            revalidate();
            String sql;
            switch(slctdate){
                case "":
                sql= "select Invoice_No,Publisher_ID,Total_Cost,Date_of_Supply from supply";
                resultSet =statement.executeQuery(sql);
                break;
                default:
                sql= "select Invoice_No,Publisher_ID,Total_Cost,Date_of_Supply from supply where Date_of_Supply='"+slctdate+"'";
                statement=connection.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
                resultSet =statement.executeQuery(sql);
                if(!resultSet.next()){
                    String TbData[]={"empty","empty","empty","empty"};
                    tblModel.addRow(TbData);
                }
                else{
                    resultSet.beforeFirst();
                    while(resultSet.next()){
                        String InvoiceNo =String.valueOf(resultSet.getInt("Invoice_No"));
                        String PublisherId=resultSet.getString("Publisher_ID");
                        String cost=String.valueOf(resultSet.getInt("Total_Cost"));
                        String date=resultSet.getString("Date_of_Supply");

                        String TbData[]={InvoiceNo,PublisherId,cost,date};
                        tblModel.addRow(TbData);
                    }
                }
                break;
            }
            con.getDBConnection().close();
            connection.close();
        }
        catch(Exception e){
            //System.out.println("BillDateChooserPropertyChange"+e);
        }
    }//GEN-LAST:event_dateInvoicePropertyChange

    private void tblInvoiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInvoiceMouseClicked
        // TODO add your handling code here:
        JTable source = (JTable)evt.getSource();
        int row = source.rowAtPoint( evt.getPoint() );
        int column = 0;
        String InvoiceNo= source.getModel().getValueAt(row, column)+"";
        DefaultTableModel tblModel=(DefaultTableModel)tblInvoiceBooks.getModel();
        tblModel.getDataVector().removeAllElements();
        revalidate();
        try{
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.createStatement();
            String sql= "select A.ISBN,A.Quantity,B.Book_Name,B.Price,A.Unit_Cost from supply_books A, book B where Invoice_No="+InvoiceNo+" and A.ISBN=B.ISBN;";
            resultSet =statement.executeQuery(sql);

            while(resultSet.next()){
                String ISBN =resultSet.getString("A.ISBN");
                String title=resultSet.getString("B.Book_Name");
                String Quantity=String.valueOf(resultSet.getInt("A.Quantity"));
                String Price=String.valueOf(resultSet.getString("B.Price"));
                String Cost=String.valueOf(resultSet.getString("A.Unit_Cost"));

                String TbData[]={ISBN,title,Quantity,Cost,Price};
                tblModel.addRow(TbData);

            }
            con.getDBConnection().close();
            connection.close();
        }
        catch(Exception e){
            tblModel.getDataVector().removeAllElements();
            revalidate();
            String TbData[]={"empty","empty","empty","empty"};
            tblModel.addRow(TbData);
        }
    }//GEN-LAST:event_tblInvoiceMouseClicked

    private void txtSearchInvoicesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchInvoicesKeyReleased
        // TODO add your handling code here:
        String txt=txtSearchInvoices.getText();
        String slctdate=((JTextField)dateInvoice.getDateEditor().getUiComponent()).getText();
        int by=cmbInvoiceSearch.getSelectedIndex();
        String type;
        switch(by){
            case 0:
            type="Invoice_No";
            break;
            case 1:
            type="Publisher_ID";
            break;
            default:
            type="Invoice_No";
            break;
        }
        try{
            String sql;
            switch(slctdate){
                case "":
                sql= "select Invoice_No,Publisher_ID,Total_Cost,Date_of_Supply from supply where "+type+" LIKE '%"+txt+"%';";
                break;
                default:
                sql= "select Invoice_No,Publisher_ID,Total_Cost,Date_of_Supply from supply where "+type+" LIKE '%"+txt+"%' and Date_of_Supply='"+slctdate+"';";
                break;
            }
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.createStatement();
            statement=connection.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
            resultSet =statement.executeQuery(sql);
            DefaultTableModel tblModel=(DefaultTableModel)tblInvoice.getModel();
            tblModel.getDataVector().removeAllElements();
            revalidate();
            if(!resultSet.next()){
                //System.out.println("0 queries");
                String TbData[]={"empty","empty","empty","empty"};
                tblModel.addRow(TbData);
            }
            else{
                resultSet.beforeFirst();
                while(resultSet.next()){
                    String BillNo =String.valueOf(resultSet.getInt("Invoice_No"));
                    String EmpId=resultSet.getString("Publisher_ID");
                    String price=String.valueOf(resultSet.getInt("Total_Cost"));
                    String date=resultSet.getString("Date_of_Supply");

                    String TbData[]={BillNo,EmpId,price,date};
                    tblModel.addRow(TbData);
                }
            }
            con.getDBConnection().close();
            connection.close();
        }
        catch(Exception e){
            System.out.println("txtSearchinvoicesKeyreleased"+e);
        }

    }//GEN-LAST:event_txtSearchInvoicesKeyReleased

    private void V_SalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_V_SalesMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_V_SalesMouseClicked

    private void BillDateChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_BillDateChooserPropertyChange
        // TODO add your handling code here:
        String slctdate=((JTextField)BillDateChooser.getDateEditor().getUiComponent()).getText();
        try{
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.createStatement();
            DefaultTableModel tblModel=(DefaultTableModel)tblBills.getModel();
            tblModel.getDataVector().removeAllElements();
            revalidate();
            String sql;
            switch(slctdate){
                case "":
                sql= "select Bill_No,Emp_ID,Total_Price,Date_of_Purchase from handle_purchases";
                resultSet =statement.executeQuery(sql);
                break;
                default:
                sql= "select Bill_No,Emp_ID,Total_Price,Date_of_Purchase from handle_purchases where Date_of_Purchase='"+slctdate+"'";
                statement=connection.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
                resultSet =statement.executeQuery(sql);
                if(!resultSet.next()){
                    String TbData[]={"empty","empty","empty","empty","empty"};
                    tblModel.addRow(TbData);
                }
                else{
                    resultSet.beforeFirst();
                    while(resultSet.next()){
                        String BillNo =String.valueOf(resultSet.getInt("Bill_No"));
                        String EmpId=resultSet.getString("Emp_ID");
                        String price=String.valueOf(resultSet.getInt("Total_Price"));
                        String date=resultSet.getString("Date_of_Purchase");

                        String TbData[]={BillNo,EmpId,price,date};
                        tblModel.addRow(TbData);
                    }
                }
                break;
            }
            con.getDBConnection().close();
            connection.close();
        }
        catch(Exception e){
            //System.out.println("BillDateChooserPropertyChange"+e);
        }
    }//GEN-LAST:event_BillDateChooserPropertyChange

    private void txtSearchBillsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchBillsKeyReleased
        // TODO add your handling code here:
        String txt=txtSearchBills.getText();
        String slctdate=((JTextField)BillDateChooser.getDateEditor().getUiComponent()).getText();
        int by=cmbSearch.getSelectedIndex();
        String type;
        switch(by){
            case 0:
            type="Bill_No";
            break;
            case 1:
            type="Emp_ID";
            break;
            default:
            type="Bill_No";
            break;
        }
        try{
            String sql;
            switch(slctdate){
                case "":
                sql= "select Bill_No,Emp_ID,Total_Price,Date_of_Purchase from handle_purchases where "+type+" LIKE '%"+txt+"%';";
                break;
                default:
                sql= "select Bill_No,Emp_ID,Total_Price,Date_of_Purchase from handle_purchases where "+type+" LIKE '%"+txt+"%' and Date_of_Purchase='"+slctdate+"';";
                break;
            }
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.createStatement();
            statement=connection.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
            resultSet =statement.executeQuery(sql);
            DefaultTableModel tblModel=(DefaultTableModel)tblBills.getModel();
            tblModel.getDataVector().removeAllElements();
            revalidate();
            if(!resultSet.next()){
                //System.out.println("0 queries");
                String TbData[]={"empty","empty","empty","empty"};
                tblModel.addRow(TbData);
            }
            else{
                resultSet.beforeFirst();
                while(resultSet.next()){
                    String BillNo =String.valueOf(resultSet.getInt("Bill_No"));
                    String EmpId=resultSet.getString("Emp_ID");
                    String price=String.valueOf(resultSet.getInt("Total_Price"));
                    String date=resultSet.getString("Date_of_Purchase");

                    String TbData[]={BillNo,EmpId,price,date};
                    tblModel.addRow(TbData);
                }
            }
            con.getDBConnection().close();
            connection.close();
        }
        catch(Exception e){
            //System.out.println("txtSearchBillsKeyPressed"+e);
        }
    }//GEN-LAST:event_txtSearchBillsKeyReleased

    private void tblBillsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBillsMouseClicked
        // TODO add your handling code here:
        JTable source = (JTable)evt.getSource();
        int row = source.rowAtPoint( evt.getPoint() );
        int column = 0;
        String BillNo= source.getModel().getValueAt(row, column)+"";
        DefaultTableModel tblModel=(DefaultTableModel)tblBillBooks.getModel();
        tblModel.getDataVector().removeAllElements();
        revalidate();
        try{
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.createStatement();
            String sql= "select A.ISBN,A.Quantity,B.Book_Name,B.Price from bill_books A, book B where Bill_No="+BillNo+" and A.ISBN=B.ISBN;";
            resultSet =statement.executeQuery(sql);

            while(resultSet.next()){
                String ISBN =resultSet.getString("A.ISBN");
                String title=resultSet.getString("B.Book_Name");
                String Quantity=String.valueOf(resultSet.getInt("A.Quantity"));
                String Price=String.valueOf(resultSet.getString("B.Price"));

                String TbData[]={ISBN,title,Quantity,Price};
                tblModel.addRow(TbData);

            }
            con.getDBConnection().close();
            connection.close();
        }
        catch(Exception e){
            tblModel.getDataVector().removeAllElements();
            revalidate();
            String TbData[]={"empty","empty","empty","empty"};
            tblModel.addRow(TbData);
        }
    }//GEN-LAST:event_tblBillsMouseClicked

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
        //this.jTabbedPane1.setSelectedIndex(2);
        OrderBill order=new OrderBill(user.odrID);
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Would You Like to Print the bill and complete order?","Warning",dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            order.makeBill();
        }
    }//GEN-LAST:event_jButton18ActionPerformed

    private void cmbOrderSearchFilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbOrderSearchFilterItemStateChanged
        // TODO add your handling code here:
        try{
            int filter=cmbOrderSearchFilter.getSelectedIndex();
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.createStatement();
            DefaultTableModel tblModel=(DefaultTableModel)tblOrder.getModel();
            tblModel.getDataVector().removeAllElements();
            revalidate();
            String sql,filt;
            switch(filter){
                case 0:
                sql="select * from place_order A,customer B where A.Customer_ID=B.Customer_NIC;";
                break;
                case 1:
                filt="Ready";
                sql="select * from place_order A,customer B where A.Customer_ID=B.Customer_NIC and A.Delivery_Status='"+filt+"';";
                break;
                case 2:
                filt="Incomplete";
                sql="select * from place_order A,customer B where A.Customer_ID=B.Customer_NIC and A.Delivery_Status='"+filt+"';";
                break;
                case 3:
                filt="Complete";
                sql="select * from place_order A,customer B where A.Customer_ID=B.Customer_NIC and A.Delivery_Status='"+filt+"';";
                break;
                default:
                sql="select * from place_order A,customer B where A.Customer_ID=B.Customer_NIC;";
                break;
            }
            statement=connection.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
            resultSet =statement.executeQuery(sql);
            if(!resultSet.next()){
                String TbData[]={"empty","empty","empty","empty","empty","empty"};
                tblModel.addRow(TbData);
            }
            else{
                resultSet.beforeFirst();
                while(resultSet.next()){
                    String order =resultSet.getString("A.Order_ID");
                    String cust=resultSet.getString("B.Customer_Name");
                    String status=resultSet.getString("A.Delivery_Status");
                    String price=resultSet.getString("A.Total_Price");
                    String Date=resultSet.getString("A.Order_Date");
                    String cDate=resultSet.getString("A.Date_of_Completion");

                    String TbData[]={order,cust,status,price,Date,cDate};
                    tblModel.addRow(TbData);
                }

            }
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_cmbOrderSearchFilterItemStateChanged

    private void tblOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrderMouseClicked
        // TODO add your handling code here:
        JTable source = (JTable)evt.getSource();
        int row = source.rowAtPoint( evt.getPoint() );
        int column = 0;
        String OrderNO= source.getModel().getValueAt(row, column)+"";
        DefaultTableModel tblModel=(DefaultTableModel)tblOrderBooks.getModel();
        tblModel.getDataVector().removeAllElements();
        revalidate();
        user.odrID=OrderNO;
        try{
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.createStatement();
            String sql= "select A.ISBN,B.Book_Name,A.Quantity,A.Status from order_books A, book B where Order_ID='"+OrderNO+"' and A.ISBN=B.ISBN;";
            resultSet =statement.executeQuery(sql);

            while(resultSet.next()){
                String ISBN =resultSet.getString("A.ISBN");
                String title=resultSet.getString("B.Book_Name");
                String Quantity=String.valueOf(resultSet.getInt("A.Quantity"));
                String status=resultSet.getString("A.Status");

                String TbData[]={ISBN,title,Quantity,status};
                tblModel.addRow(TbData);

            }
            con.getDBConnection().close();
            connection.close();
        }
        catch(Exception e){
            tblModel.getDataVector().removeAllElements();
            revalidate();
            String TbData[]={"empty","empty","empty","empty"};
            tblModel.addRow(TbData);
        }
    }//GEN-LAST:event_tblOrderMouseClicked

    private void txtOrderSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtOrderSearchKeyReleased
        // TODO add your handling code here:
        String txt=txtOrderSearch.getText();
        int by=cmbOrderSearch.getSelectedIndex();
        int filter=cmbOrderSearchFilter.getSelectedIndex();
        String type,filt;
        switch(by){
            case 0:
            type="A.Order_ID";
            break;
            case 1:
            type="A.Customer_ID";
            break;
            case 2:
            type="B.Customer_Name";
            break;
            default:
            type="A.Order_ID";
            break;
        }switch(filter){
            case 0:
            filt="";
            break;
            case 1:
            filt="Ready";
            break;
            case 2:
            filt="Incomplete";
            break;
            case 3:
            filt="Complete";
            break;
            default:
            filt="Ready";
            break;
        }
        try{
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.createStatement();
            String sql= "select * from place_order A,customer B where "+type+" LIKE '%"+txt+"%' and A.Customer_ID=B.Customer_NIC and A.Delivery_Status like '%"+filt+"%';";
            statement=connection.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
            resultSet =statement.executeQuery(sql);
            DefaultTableModel tblModel=(DefaultTableModel)tblOrder.getModel();
            tblModel.getDataVector().removeAllElements();
            revalidate();
            if(!resultSet.next()){
                String TbData[]={"empty","empty","empty","empty","empty","empty"};
                tblModel.addRow(TbData);
            }
            else{
                resultSet.beforeFirst();
                while(resultSet.next()){
                    String order =resultSet.getString("A.Order_ID");
                    String cust=resultSet.getString("B.Customer_Name");
                    String status=resultSet.getString("A.Delivery_Status");
                    String price=resultSet.getString("A.Total_Price");
                    String Date=resultSet.getString("A.Order_Date");
                    String cDate=resultSet.getString("A.Date_of_Completion");

                    String TbData[]={order,cust,status,price,Date,cDate};
                    tblModel.addRow(TbData);
                }
            }
            con.getDBConnection().close();
            connection.close();
        }
        catch(Exception e){
            System.out.println(e);
        }

    }//GEN-LAST:event_txtOrderSearchKeyReleased

    private void btnNewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewOrderActionPerformed
        // TODO add your handling code here:
        NewOrder order=new NewOrder();
        order.setVisible(true);
    }//GEN-LAST:event_btnNewOrderActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        user.totalCost=0;
        user.Books.removeAllElements();
        txtTotalCost.setText("");
        txtBookInvoice.setText("");
        txtCost.setText("0");
        txtquant.setText("");
        txtPublisher.setText("");
        txtPay.setText("");
        DefaultTableModel tblModel=(DefaultTableModel)tblInvoceBooks.getModel();
        tblModel.getDataVector().removeAllElements();
        revalidate();
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Want to Submit?","Warning",dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){

            try{
                String publisher=txtPublisher.getText();
                long millis=System.currentTimeMillis();
                Date dte=new Date(millis);
                String sql,SQL,Sql;
                String SQl="SELECT Invoice_No FROM `supply` ORDER BY `supply`.`Invoice_No`  DESC";
                DBConnection con=new DBConnection();
                Connection connection=con.getDBConnection();
                Statement stmt=connection.createStatement();
                ResultSet rs=stmt.executeQuery(SQl);
                rs.next();
                int invoiceNo=rs.getInt("Invoice_No")+1;
                sql= "Insert into supply (Invoice_No,Publisher_ID,Total_Cost,Date_of_Supply) values("+invoiceNo+",'"+publisher+"',"+user.totalCost+",'"+dte+"');";
                //System.out.println(OrderID+","+CustomerNIC+"','incomplete','"+TotalPrice+"','"+orderdate)
                Statement statement;
                statement=connection.createStatement();
                statement.execute(sql);
                for(int i=0;i<user.Books.size();i++){
                    //System.out.println(OrderID+"','"+Books.elementAt(i).getISBN()+"','"+Books.elementAt(i).getQuantity());
                    SQL="Insert into supply_books (Invoice_No,ISBN,Quantity,Unit_Cost) values ('"+invoiceNo+"','"+user.Books.elementAt(i).getISBN()+"','"+user.Books.elementAt(i).getQuantity()+"','"+user.Books.elementAt(i).getCost()+"');";
                    Statement stmts=connection.createStatement();
                    stmts.execute(SQL);
                    Sql="Update book SET No_of_Books_Remaining=No_of_Books_Remaining + "+user.Books.elementAt(i).getQuantity()+" WHERE ISBN='"+user.Books.elementAt(i).getISBN()+"' ;";
                    Statement st=connection.createStatement();
                    st.execute(Sql);
                }
                user.totalCost=0;
                user.Books.removeAllElements();
                txtTotalCost.setText("");
                txtBookInvoice.setText("");
                txtCost.setText("");
                txtquant.setText("");
                txtPublisher.setText("0");
                txtPay.setText("");
                DefaultTableModel tblModel=(DefaultTableModel)tblInvoceBooks.getModel();
                tblModel.getDataVector().removeAllElements();
                revalidate();
            }
            catch (SQLException ex) {
                Logger.getLogger(AddNewOrder.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch (Exception ex) {
                Logger.getLogger(AddNewOrder.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        int dialogButton2 = JOptionPane.CLOSED_OPTION;
        int dialogResult2 = JOptionPane.showConfirmDialog (null, "Submited","Warning",dialogButton);

    }//GEN-LAST:event_jButton14ActionPerformed

    private void btnNewBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewBookActionPerformed
        // TODO add your handling code here:
        NewBook book=new NewBook();
        book.setVisible(true);
        //this.setVisible(false);

    }//GEN-LAST:event_btnNewBookActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        String ISBN=txtBookInvoice.getText();

        String quan=txtquant.getText();
        String cos=txtCost.getText();
        DefaultTableModel tblModel=(DefaultTableModel)tblInvoceBooks.getModel();
        try {
            int cost=Integer.parseInt(cos);
            int quantity=Integer.parseInt(quan);
            String sql= "select ISBN,Book_Name,Price from book where ISBN='"+ISBN+"';";
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
            resultSet =statement.executeQuery(sql);
            if(resultSet.next()){
                boolean dup=false;
                for (int row = 0 ; row < tblModel.getRowCount(); row++) {
                    if(ISBN.equals(tblModel.getValueAt(row, 0))) {
                        dup=true;
                        int dialogButton = JOptionPane.CLOSED_OPTION;
                        int dialogResult = JOptionPane.showConfirmDialog (null, "Book has been already added","Warning",dialogButton);
                        break;
                    }
                }
                if(dup==false){
                    int price=resultSet.getInt("Price");
                    int calc=(cost*quantity);
                    book Book=new book(ISBN,quantity,cost);
                    user.Books.add(Book);
                    txtBookInvoice.setText("");
                    txtquant.setText("");
                    txtCost.setText("");
                    String TbData[]={ISBN,resultSet.getString("Book_Name"),quan,calc+""};
                    tblModel.addRow(TbData);
                    user.totalCost+=calc;
                    txtTotalCost.setText(user.totalCost+"");
                }
            }
            else{
                int dialogButton = JOptionPane.CLOSED_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog (null, "Please select the relative book from table to continue","Warning",dialogButton);
            }
        }
        catch (NumberFormatException e) {
            System.out.println("javariance.bookshop.NewOrder.btnAddBookOrderActionPerformed"+e);
            txtquant.setText("");
            int dialogButton = JOptionPane.CLOSED_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog (null, "Quantity is Invalid","Warning",dialogButton);

        }
        catch (Exception ex) {
            Logger.getLogger(NewOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void txtBookInvoiceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookInvoiceKeyReleased
        // TODO add your handling code here:
        String col[]={"ISBN","Title","Quantity","Price"};
        DefaultTableModel model = new DefaultTableModel(col,0);
        tblPubBook.setModel(model);
        String txt=txtBookInvoice.getText();
        try{
            String sql;
            sql= "select ISBN,Book_Name,Price,No_of_Books_Remaining from book where Book_Name LIKE '%"+txt+"%' OR ISBN LIKE '%"+txt+"%';";
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.createStatement();
            statement=connection.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
            resultSet =statement.executeQuery(sql);
            DefaultTableModel tblModel=(DefaultTableModel)tblPubBook.getModel();
            tblModel.getDataVector().removeAllElements();
            revalidate();
            if(!resultSet.next()){
                //System.out.println("0 queries");
                String TbData[]={"empty","empty","empty","empty"};
                tblModel.addRow(TbData);
            }
            else{
                resultSet.beforeFirst();
                while(resultSet.next()){
                    String ISBN =resultSet.getString("ISBN");
                    String title=resultSet.getString("Book_Name");
                    String Quantity=String.valueOf(resultSet.getInt("No_of_Books_Remaining"));
                    String Price=String.valueOf(resultSet.getInt("Price"));

                    String TbData[]={ISBN,title,Quantity,Price};
                    tblModel.addRow(TbData);
                }
            }
            con.getDBConnection().close();
            connection.close();
        }
        catch(Exception e){
            System.out.println("txtSearchcustomerKeyPressed"+e);
        }
    }//GEN-LAST:event_txtBookInvoiceKeyReleased

    private void tblPubBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPubBookMouseClicked
        // TODO add your handling code here:
        if(tblPubBook.getColumnCount()==3){
            JTable source = (JTable)evt.getSource();
            int row = source.rowAtPoint( evt.getPoint() );
            int column = 0;
            String PubID= source.getModel().getValueAt(row, column)+"";
            txtPublisher.setText(PubID);
        }
        if(tblPubBook.getColumnCount()==4){
            JTable source = (JTable)evt.getSource();
            int row = source.rowAtPoint( evt.getPoint() );
            int column = 0;
            String ISBN= source.getModel().getValueAt(row, column)+"";
            txtBookInvoice.setText(ISBN);
        }

    }//GEN-LAST:event_tblPubBookMouseClicked

    private void btnAddPublisherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPublisherActionPerformed
        // TODO add your handling code here:
        NewPublisher pub=new NewPublisher();
        pub.setVisible(true);

    }//GEN-LAST:event_btnAddPublisherActionPerformed

    private void txtPublisherKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPublisherKeyReleased
        // TODO add your handling code here:

        String col[]={"Pub_ID","Pub name","Contact_No"};
        DefaultTableModel model = new DefaultTableModel(col,0);
        tblPubBook.setModel(model);
        String txt=txtPublisher.getText();
        try{
            String sql;
            sql= "select Publisher_ID,Publisher_Name,Contact_No from publisher  WHERE (Publisher_ID LIKE '%"+txt+"%') OR (Publisher_Name LIKE '%"+txt+"%') OR (Contact_No LIKE '%"+txt+"%');";
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.createStatement();
            statement=connection.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
            resultSet =statement.executeQuery(sql);
            DefaultTableModel tblModel=(DefaultTableModel)tblPubBook.getModel();
            tblModel.getDataVector().removeAllElements();
            revalidate();
            if(!resultSet.next()){
                //System.out.println("0 queries");
                String TbData[]={"empty","empty","empty"};
                tblModel.addRow(TbData);
            }
            else{
                resultSet.beforeFirst();
                while(resultSet.next()){
                    String ID =resultSet.getString("Publisher_ID");
                    String Name=resultSet.getString("Publisher_Name");
                    String Number=resultSet.getString("Contact_No");

                    String TbData[]={ID,Name,Number};
                    tblModel.addRow(TbData);
                }
            }
            con.getDBConnection().close();
            connection.close();
        }
        catch(Exception e){
            System.out.println("txtPublisherKeyPressed"+e);
        }

    }//GEN-LAST:event_txtPublisherKeyReleased

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        txtBalance.setText("");
        txtPayment.setText("");
        txtBookSearch.setText("");
        txtQuan.setText("");
        txtTotal.setText("0");
        DefaultTableModel tblModel=(DefaultTableModel)tblBillBookList.getModel();
        tblModel.getDataVector().removeAllElements();
        revalidate();
        Bill bill=new Bill();
        bill.setTotalPrice(0);
        bill.getBooks().removeAllElements();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Want to Make Bill?","Warning",dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            Bill bill=new Bill();
            bill.makeBill();
            int dialogButton2 = JOptionPane.CLOSED_OPTION;
            int dialogResult2 = JOptionPane.showConfirmDialog (null, "Submited","Warning",dialogButton);
            Booktable();
            txtBalance.setText("");
            txtPayment.setText("");
            txtBookSearch.setText("");
            txtQuan.setText("");
            txtTotal.setText("0");
            DefaultTableModel tblModel=(DefaultTableModel)tblBillBookList.getModel();
            tblModel.getDataVector().removeAllElements();
            revalidate();

        }

    }//GEN-LAST:event_jButton8ActionPerformed

    private void txtPaymentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPaymentKeyReleased
        // TODO add your handling code here:
        int cost=Integer.parseInt(txtTotal.getText());
        int pay=Integer.parseInt(txtPayment.getText());
        int bal=pay-cost;
        txtBalance.setText(bal+"");
    }//GEN-LAST:event_txtPaymentKeyReleased

    private void tblBillBookListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBillBookListMouseClicked
        // TODO add your handling code here:
        Bill bill=new Bill();
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Want to remove this raw?d","Warning",dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            JTable source = (JTable)evt.getSource();
            int row = source.rowAtPoint( evt.getPoint() );
            DefaultTableModel tblModel=(DefaultTableModel)tblBillBookList.getModel();
            int Price= Integer.parseInt(tblModel.getValueAt(row, 3)+"");
            tblModel.removeRow(row);
            bill.removeBooks(row, Price);
            txtTotal.setText(bill.getTotalPrice()+"");
        }
    }//GEN-LAST:event_tblBillBookListMouseClicked

    private void tblBooksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBooksMouseClicked
        // TODO add your handling code here:
        JTable source = (JTable)evt.getSource();
        int row = source.rowAtPoint( evt.getPoint() );
        int column = 0;
        String ISBN= source.getModel().getValueAt(row, column)+"";
        txtBookSearch.setText(ISBN);
    }//GEN-LAST:event_tblBooksMouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        jTabbedPane1.getSelectedIndex();
        String ISBN=txtBookSearch.getText();
        String quan=txtQuan.getText();
        DefaultTableModel tblModel=(DefaultTableModel)tblBillBookList.getModel();
        try {
            int quantity=Integer.parseInt(quan);
            String sql= "select ISBN,Book_Name,Price from book where ISBN='"+ISBN+"';";
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
            resultSet =statement.executeQuery(sql);
            if(resultSet.next()){
                boolean dup=false;
                for (int row = 0 ; row < tblModel.getRowCount(); row++) {
                    if(ISBN.equals(tblModel.getValueAt(row, 0))) {
                        dup=true;
                        int dialogButton = JOptionPane.CLOSED_OPTION;
                        JOptionPane.showConfirmDialog (null, "Book has been already added","Warning",dialogButton);
                        break;
                    }
                }
                if(dup==false){
                    int price=resultSet.getInt("Price");
                    int calc=price*quantity;
                    Bill bill=new Bill();

                    bill.addBooks(ISBN,price, quantity);
                    txtBookSearch.setText("");
                    txtQuan.setText("");
                    String TbData[]={ISBN,resultSet.getString("Book_Name"),quan,calc+""};
                    tblModel.addRow(TbData);
                    txtTotal.setText(bill.getTotalPrice()+"");
                }
            }
            else{
                int dialogButton = JOptionPane.CLOSED_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog (null, "Please select the relative book from table to continue","Warning",dialogButton);
            }
        }
        catch (NumberFormatException e) {
            System.out.println("javariance.bookshop.NewOrder.btnAddBookOrderActionPerformed"+e);
            txtQuan.setText("");
            int dialogButton = JOptionPane.CLOSED_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog (null, "Quantity is Invalid","Warning",dialogButton);

        }
        catch (Exception ex) {
            Logger.getLogger(NewOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void txtBookSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookSearchKeyReleased
        // TODO add your handling code here:
        String txt=txtBookSearch.getText();
        try{
            String sql;
            sql= "select A.ISBN,A.Category,A.Book_Name,A.Price,B.Author_Name from book A,author B where A.Author_ID=B.Author_ID AND (A.Book_Name LIKE '%"+txt+"%' OR A.ISBN LIKE '%"+txt+"%');";
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.createStatement();
            statement=connection.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
            resultSet =statement.executeQuery(sql);
            DefaultTableModel tblModel=(DefaultTableModel)tblBooks.getModel();
            tblModel.getDataVector().removeAllElements();
            revalidate();
            if(!resultSet.next()){
                //System.out.println("0 queries");
                String TbData[]={"empty","empty","empty","empty","empty"};
                tblModel.addRow(TbData);
            }
            else{
                resultSet.beforeFirst();
                while(resultSet.next()){
                    String ISBN =resultSet.getString("A.ISBN");
                    String title=resultSet.getString("A.Book_Name");
                    String Auther=resultSet.getString("B.Author_Name");
                    String Category=resultSet.getString("A.Category");
                    String Price=String.valueOf(resultSet.getInt("A.Price"));

                    String TbData[]={ISBN,title,Auther,Category,Price};
                    tblModel.addRow(TbData);
                }
            }
            con.getDBConnection().close();
            connection.close();
        }
        catch(Exception e){
            System.out.println("txtSearchcustomerKeyPressed"+e);
        }
    }//GEN-LAST:event_txtBookSearchKeyReleased

    private void SearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchMouseClicked

    private void ComboAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboAuthorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboAuthorActionPerformed

    private void txtSearchBooksKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchBooksKeyReleased
        // TODO add your handling code here:
        String txt=txtSearchBooks.getText();
        int by=ComboBoxSrchBy.getSelectedIndex();
        String type;
        switch(by){
            case 0:
            type="A.Book_Name";
            break;
            case 1:
            type="B.Author_Name";
            break;
            case 2:
            type="A.Category";
            break;
            default:
            type="A.Book_Name";
            break;
        }
        try{
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.createStatement();
            String sql= "select A.ISBN,A.Category,A.Book_Name,A.No_of_Books_Remaining,B.Author_Name from book A,author B where A.Author_ID=B.Author_ID and "+type+" LIKE '%"+txt+"%';";
            statement=connection.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
            resultSet =statement.executeQuery(sql);
            DefaultTableModel tblModel=(DefaultTableModel)BookSearchTable.getModel();
            tblModel.getDataVector().removeAllElements();
            revalidate();
            if(!resultSet.next()){
                String TbData[]={"empty","empty","empty","empty","empty"};
                tblModel.addRow(TbData);
            }
            else{
                resultSet.beforeFirst();
                while(resultSet.next()){
                    String ISBN =resultSet.getString("A.ISBN");
                    String title=resultSet.getString("A.Book_Name");
                    String Quantity=String.valueOf(resultSet.getInt("A.No_of_Books_Remaining"));
                    String Auther=resultSet.getString("B.Author_Name");
                    String Category=resultSet.getString("A.Category");

                    String TbData[]={ISBN,title,Auther,Quantity,Category};
                    tblModel.addRow(TbData);
                }
            }
            con.getDBConnection().close();
            connection.close();
        }
        catch(Exception e){
            //System.out.println(e);
        }
    }//GEN-LAST:event_txtSearchBooksKeyReleased

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog (null, "Would You Like to Save your changes?","Warning",dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            // Saving code here
            try{
                DBConnection con=new DBConnection();
                Connection connection=con.getDBConnection();
                Statement statement;
                ResultSet resultSet;
                statement=connection.createStatement();
                String ISBN=txtISBN.getText();
                String title=txtTitle.getText();
                int price=Integer.valueOf(txtPrice.getText());
                String category=txtCategory.getText();
                int Author=ComboAuthor.getSelectedIndex()+1;
                String sql= "UPDATE book SET Book_Name='"+title+"',Price="+price+",Author_ID="+Author+",Category='"+category+"'  WHERE ISBN="+ISBN+";";
                statement.executeUpdate(sql);
                Booktable();
                //System.out.println("sucess:");
                con.getDBConnection().close();
                connection.close();
            }
            catch(Exception e){
                //System.out.println("Update Failed:"+e);
            }
        }
        else{
            //ComboAuthor.setName("");
            txtCategory.setText("");
            txtISBN.setText("");
            txtPrice.setText("");
            txtQuantity.setText("");
            txtTitle.setText("");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        //ComboAuthor.setText("");
        txtCategory.setText("");
        txtISBN.setText("");
        txtPrice.setText("");
        txtQuantity.setText("");
        txtTitle.setText("");
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnEditPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPriceActionPerformed
        // TODO add your handling code here:
        txtPrice.setEditable(true);
    }//GEN-LAST:event_btnEditPriceActionPerformed

    private void btnEditCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCatActionPerformed
        // TODO add your handling code here:
        txtCategory.setEditable(true);
    }//GEN-LAST:event_btnEditCatActionPerformed

    private void btnEditAutherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditAutherActionPerformed
        // TODO add your handling code here:
        ComboAuthor.setEnabled(true);
    }//GEN-LAST:event_btnEditAutherActionPerformed

    private void btnEditTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditTitleActionPerformed
        // TODO add your handling code here:
        txtTitle.setEditable(true);
    }//GEN-LAST:event_btnEditTitleActionPerformed

    private void BookSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BookSearchTableMouseClicked
        // TODO add your handling code here:

        txtTitle.setEditable(false);
        ComboAuthor.setEnabled(false);
        txtPrice.setEditable(false);
        txtCategory.setEditable(false);
        JTable source = (JTable)evt.getSource();
        int row = source.rowAtPoint( evt.getPoint() );
        int column = 0;
        String booksrchISBN=source.getModel().getValueAt(row, column)+"";

        try{
            DBConnection con=new DBConnection();
            Connection connection=con.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=connection.createStatement();
            String sql= "select A.Category,A.Price,A.ISBN,A.Book_Name,A.No_of_Books_Remaining,B.Author_Name,B.Author_ID from book A,author B where A.Author_ID=B.Author_ID and A.ISBN="+booksrchISBN+" ;";
            resultSet =statement.executeQuery(sql);

            while(resultSet.next()){
                String ISBN =resultSet.getString("A.ISBN");
                String title=resultSet.getString("A.Book_Name");
                String Quantity=String.valueOf(resultSet.getInt("A.No_of_Books_Remaining"));
                int Auther=resultSet.getInt("B.Author_ID");
                String Category=resultSet.getString("A.Category");
                String Price=String.valueOf(resultSet.getString("A.Price"));

                txtTitle.setText(title);
                ComboAuthor.setSelectedIndex(Auther-1);
                txtCategory.setText(Category);
                txtISBN.setText(ISBN);
                txtPrice.setText(Price);
                txtQuantity.setText(Quantity);

            }
            con.getDBConnection().close();
            connection.close();
        }
        catch(Exception e){
            System.out.println(e);
        }

        //JOptionPane.showMessageDialog(null, s);

    }//GEN-LAST:event_BookSearchTableMouseClicked
    private void Booktable(){
        try{
        DBConnection con=new DBConnection();
        Connection connection=con.getDBConnection();
        Statement statement;
        ResultSet resultSet;
        statement=connection.createStatement();
        String sql= "select A.Price,A.ISBN,A.Category,A.Book_Name,A.No_of_Books_Remaining,B.Author_Name from book A,author B where A.Author_ID=B.Author_ID ;";
        statement=connection.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
        resultSet =statement.executeQuery(sql);
        DefaultTableModel tblModel=(DefaultTableModel)BookSearchTable.getModel();
        DefaultTableModel tblModel2=(DefaultTableModel)tblBooks.getModel();
        tblModel.getDataVector().removeAllElements();
        tblModel2.getDataVector().removeAllElements();
        revalidate();
        if(!resultSet.next()){
        String TbData[]={"empty","empty","empty","empty","empty"};       
                tblModel.addRow(TbData);
        }
        else{
            resultSet.beforeFirst();
            while(resultSet.next()){
                String ISBN =resultSet.getString("A.ISBN");
                String title=resultSet.getString("A.Book_Name");
                String Quantity=String.valueOf(resultSet.getInt("A.No_of_Books_Remaining"));
                String Auther=resultSet.getString("B.Author_Name");
                String Category=resultSet.getString("A.Category");
                String Price=String.valueOf(resultSet.getInt("A.Price"));
          
                String TbData[]={ISBN,title,Auther,Quantity,Category};
                String TbData2[]={ISBN,title,Auther,Quantity,Price};
                tblModel.addRow(TbData);
                tblModel2.addRow(TbData);
            }                 
        }
        con.getDBConnection().close();
                connection.close();
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    private void BillTable(){
        try{
        DBConnection con=new DBConnection();
        Connection connection=con.getDBConnection();
        Statement statement;
        ResultSet resultSet;
        statement=connection.createStatement();
        String sql= "select Bill_No,Emp_ID,Total_Price,Date_of_Purchase from handle_purchases;";
        resultSet =statement.executeQuery(sql);
        DefaultTableModel tblModel=(DefaultTableModel)tblBills.getModel();
        tblModel.getDataVector().removeAllElements();
        revalidate();
            while(resultSet.next()){
                String BillNo =String.valueOf(resultSet.getInt("Bill_No"));
                String EmpId=resultSet.getString("Emp_ID");
                String price=String.valueOf(resultSet.getInt("Total_Price"));
                String date=resultSet.getString("Date_of_Purchase");
          
                String TbData[]={BillNo,EmpId,price,date};       
                tblModel.addRow(TbData);
            }            
            con.getDBConnection().close();
                connection.close();
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    private void InvoceTable(){
        try{
        DBConnection con=new DBConnection();
        Connection connection=con.getDBConnection();
        Statement statement;
        ResultSet resultSet;
        statement=connection.createStatement();
        String sql= "select Invoice_No,Publisher_ID,Total_Cost,Date_of_Supply from supply;";
        resultSet =statement.executeQuery(sql);
        DefaultTableModel tblModel=(DefaultTableModel)tblInvoice.getModel();
        tblModel.getDataVector().removeAllElements();
        revalidate();
            while(resultSet.next()){
                String BillNo =String.valueOf(resultSet.getInt("Invoice_No"));
                String EmpId=resultSet.getString("Publisher_ID");
                String price=String.valueOf(resultSet.getInt("Total_Cost"));
                String date=resultSet.getString("Date_of_Supply");
          
                String TbData[]={BillNo,EmpId,price,date};       
                tblModel.addRow(TbData);
            }
            con.getDBConnection().close();
                connection.close();
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    private void OrderChangeStatus(){
        try {
            DBConnection conn=new DBConnection();
            Connection con=conn.getDBConnection();
            Statement statement;
            ResultSet resultSet;
            statement=con.createStatement();
            String sql="select Order_ID from place_order where Delivery_Status='Ready' OR Delivery_Status='Incomplete'";
            resultSet =statement.executeQuery(sql);
        
            while(resultSet.next()){
                int i=0;
                String Order_ID =resultSet.getString("Order_ID");
                ResultSet rs;
                Statement stmt =con.createStatement();
                String Sql="select A.ISBN,A.Quantity,B.No_of_Books_Remaining from order_books A,book B where Order_ID='"+ Order_ID +"' AND A.ISBN=B.ISBN;";
                rs =stmt.executeQuery(Sql);
                while(rs.next()){
                    String ISBN =rs.getString("A.ISBN");
                    int quantity=rs.getInt("A.Quantity");
                    int noBooks=rs.getInt("B.No_of_Books_Remaining");
                    Statement st =con.createStatement();
                    if(quantity<=noBooks){
                        String SQL="Update order_books SET Status='Ready' where ISBN='"+ISBN+"'and Order_ID='"+Order_ID+"';";
                        st.executeUpdate(SQL);
                    }
                    else{
                        i++;
                        String SQL="Update order_books SET Status='Incomplete' where ISBN='"+ISBN+"' and Order_ID='"+Order_ID+"';";
                        st.executeUpdate(SQL);
                    }
                }
                if(i>0){
                    String Sq="update place_order SET Delivery_Status='Incomplete' where Order_ID='"+Order_ID+"';";
                    Statement s=con.createStatement();
                    s.executeUpdate(Sq);
                }
                else{
                    String Sq="update place_order SET Delivery_Status='Ready' where Order_ID='"+Order_ID+"';";
                    Statement s=con.createStatement();
                    s.executeUpdate(Sq);
                }
            }
            conn.getDBConnection().close();
            con.close();
        }
            
        catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     private void OrderTable(){
        try{
        DBConnection con=new DBConnection();
        Connection connection=con.getDBConnection();
        Statement statement;
        ResultSet resultSet;
        statement=connection.createStatement();
        String sql= "select * from place_order A,customer B where A.Customer_ID=B.Customer_NIC;";;
        resultSet =statement.executeQuery(sql);
        DefaultTableModel tblModel=(DefaultTableModel)tblOrder.getModel();
        tblModel.getDataVector().removeAllElements();
        revalidate();
            while(resultSet.next()){
                String order =resultSet.getString("A.Order_ID");
                String cust=resultSet.getString("B.Customer_Name");
                String status=resultSet.getString("A.Delivery_Status");
                String price=resultSet.getString("A.Total_Price");
                String Date=resultSet.getString("A.Order_Date");
                String cDate=resultSet.getString("A.Date_of_Completion");
          
                String TbData[]={order,cust,status,price,Date,cDate};       
                tblModel.addRow(TbData);
            }
            con.getDBConnection().close();
                connection.close();
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    
    private void fillComboAuther(){
        try{
        DBConnection con=new DBConnection();
        Connection connection=con.getDBConnection();
        Statement statement;
        ResultSet resultSet;
        statement=connection.createStatement();
        String sql= "select * from author ORDER BY `Author_ID` ASC;";
        resultSet =statement.executeQuery(sql);
            while(resultSet.next()){
               String name=resultSet.getString("Author_Name");
               ComboAuthor.addItem(name);
            }   
            con.getDBConnection().close();
                connection.close();
        }
        catch(Exception e){
            System.out.println(e);
        }
    }    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Author;
    private com.toedter.calendar.JDateChooser BillDateChooser;
    private javax.swing.JTable BookSearchTable;
    private javax.swing.JComboBox<String> ComboAuthor;
    private javax.swing.JComboBox<String> ComboBoxSrchBy;
    private javax.swing.JPanel Order;
    private javax.swing.JPanel Purchase;
    private javax.swing.JPanel Sale;
    private javax.swing.JPanel Search;
    private javax.swing.JPanel Settings;
    private javax.swing.JPanel User;
    private javax.swing.JPanel V_Purchases;
    private javax.swing.JPanel V_Sales;
    private javax.swing.JButton btnAddPublisher;
    private javax.swing.JButton btnEditAuther;
    private javax.swing.JButton btnEditCat;
    private javax.swing.JButton btnEditPrice;
    private javax.swing.JButton btnEditTitle;
    private javax.swing.JButton btnNewBook;
    private javax.swing.JButton btnNewOrder;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btn_AddUser;
    private javax.swing.JButton btn_ChngPw;
    private javax.swing.JButton btn_customerEdit;
    private javax.swing.JButton btn_customerRemove;
    private javax.swing.JButton btn_removeUser;
    private javax.swing.JComboBox<String> cmbInvoiceSearch;
    private javax.swing.JComboBox<String> cmbOrderSearch;
    private javax.swing.JComboBox<String> cmbOrderSearchFilter;
    private javax.swing.JComboBox<String> cmbSearch;
    private com.toedter.calendar.JDateChooser dateInvoice;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable tblBillBookList;
    private javax.swing.JTable tblBillBooks;
    private javax.swing.JTable tblBills;
    private javax.swing.JTable tblBooks;
    private javax.swing.JTable tblInvoceBooks;
    private javax.swing.JTable tblInvoice;
    private javax.swing.JTable tblInvoiceBooks;
    private javax.swing.JTable tblOrder;
    private javax.swing.JTable tblOrderBooks;
    private javax.swing.JTable tblPubBook;
    private javax.swing.JTextField txtBalance;
    private javax.swing.JTextField txtBookInvoice;
    private javax.swing.JTextField txtBookSearch;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextField txtCost;
    private javax.swing.JTextField txtISBN;
    private javax.swing.JTextField txtOrderSearch;
    private javax.swing.JTextField txtPay;
    private javax.swing.JTextField txtPayment;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtPublisher;
    private javax.swing.JTextField txtQuan;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSearchBills;
    private javax.swing.JTextField txtSearchBooks;
    private javax.swing.JTextField txtSearchInvoices;
    private javax.swing.JTextArea txtTitle;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtTotalCost;
    private javax.swing.JTextField txtquant;
    // End of variables declaration//GEN-END:variables
        
}
